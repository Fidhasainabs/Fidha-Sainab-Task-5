# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Yo3hmICSsnNn1kJ2812xXvRS8V0Zt2j
"""

!apt-get install -y graphviz

!pip install graphviz

import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import graphviz

df = pd.read_csv('heart.csv')
print("Dataset loaded successfully.")
df.head()

# Separate features and target
X = df.drop('target', axis=1)
y = df['target']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train Decision Tree
dt = DecisionTreeClassifier(random_state=42)
dt.fit(X_train, y_train)

# Export tree to Graphviz
dot_data = export_graphviz(dt, out_file=None,
                           feature_names=X.columns,
                           class_names=['No Disease', 'Disease'],
                           filled=True, rounded=True,
                           special_characters=True)
graph = graphviz.Source(dot_data)
graph.render("heart_tree")  # Saves the tree to a file
graph  # Display in Colab

# Limit tree depth
dt_limited = DecisionTreeClassifier(max_depth=4, random_state=42)
dt_limited.fit(X_train, y_train)

# Evaluate
train_acc = dt_limited.score(X_train, y_train)
test_acc = dt_limited.score(X_test, y_test)

print(f"Decision Tree (max_depth=4) - Training Accuracy: {train_acc:.2f}")
print(f"Decision Tree (max_depth=4) - Testing Accuracy: {test_acc:.2f}")

# Train Random Forest
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Evaluate
rf_train_acc = rf.score(X_train, y_train)
rf_test_acc = rf.score(X_test, y_test)

print(f"Random Forest - Training Accuracy: {rf_train_acc:.2f}")
print(f"Random Forest - Testing Accuracy: {rf_test_acc:.2f}")

# Plot feature importances
importances = rf.feature_importances_
indices = importances.argsort()[::-1]

plt.figure(figsize=(10, 6))
plt.title("Feature Importances (Random Forest)")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), [X.columns[i] for i in indices], rotation=90)
plt.tight_layout()
plt.show()

# 5-fold cross-validation
cv_scores = cross_val_score(rf, X, y, cv=5)

print(f"Cross-Validation Scores: {cv_scores}")
print(f"Mean CV Accuracy: {cv_scores.mean():.2f}")
print(f"Std Dev of CV Accuracy: {cv_scores.std():.2f}")